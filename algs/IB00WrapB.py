# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-09
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-10-12'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingParameterEnum,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

#pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IB00WrapB(QgsProcessingAlgorithm):
    """
    Calcula todos los indicadores de ambiente construido
    """


    BLOCKS = 'BLOCKS'
    FIELD_POPULATION = 'FIELD_POPULATION'
    FIELD_HOUSING = 'FIELD_HOUSING'    
    CELL_SIZE = 'CELL_SIZE'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'

    #-----------------B01----------------------
    NO2 = 'NO2'
    PS = 'PS'
    SO2 = 'SO2'
    O3 = 'O3' 
    #-----------------B02----------------------       
    ROADS = 'ROADS'
    LUMINARY = 'LUMINARY'
    #-----------------B03----------------------
    NOISE_NIGHT = 'NOISE_NIGHT'
    NOISE_DAY = 'NOISE_DAY'
    #-----------------B04----------------------
    DISTANCE_OPTIONS = 'DISTANCE_OPTIONS'
    ROADS = 'ROADS'         
    GREEN = 'GREEN'
    #-----------------B06----------------------    
    EQUIPMENT_GREEN = 'EQUIPMENT_GREEN'
    #-----------------B07----------------------    
    SOIL = 'SOIL'
    #-----------------B08----------------------    
    AGRICULTRURAL = 'AGRICULTRURAL'
    #-----------------OUTPUTS----------------------
    OUTPUT_B01 = 'OUTPUT_B01'
    OUTPUT_B02 = 'OUTPUT_B02'
    OUTPUT_B03 = 'OUTPUT_B03'
    OUTPUT_B05 = 'OUTPUT_B05'
    OUTPUT_B04 = 'OUTPUT_B04'
    OUTPUT_B07 = 'OUTPUT_B07'
    OUTPUT_B06 = 'OUTPUT_B06'


    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH_B01 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB01'][1]))
        FULL_PATH_B02 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB02'][1]))
        FULL_PATH_B03 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB03'][1]))
        FULL_PATH_B04 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB04'][1]))        
        FULL_PATH_B05 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB05'][1]))
        FULL_PATH_B07 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB07'][1]))
        FULL_PATH_B06 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB06'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )        

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon],
                optional = True,
                defaultValue=""
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS',
                optional = True
            )
        )  

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_HOUSING,
                self.tr('Viviendas'),
                'viviendas', 'BLOCKS',
                optional = True
            )
        )   


        #-----------------B01----------------------

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.O3,
                self.tr('O3 OZONO'),
                optional = True,
                defaultValue=""
            )
        )          


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NO2,
                self.tr('NO2 DIOXIDO DE NITROGENO'),
                defaultValue="",
                optional = True
            )
        )
     

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.SO2,
                self.tr('SO2 DIOXIDO DE AZUFRE'),
                defaultValue="",
                optional = True
            )
        )   


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.PS,
                self.tr('Ps PARTICULAS FINAS'),
                defaultValue="",
                optional = True
            )
        )  

        #-----------------B02----------------------       
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ROADS,
                self.tr('Vías públicas'),
                [QgsProcessing.TypeVectorLine],
                optional = True,
                defaultValue=""
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.LUMINARY,
                self.tr('Luminarias'),
                [QgsProcessing.TypeVectorPoint],
                optional = True,
                defaultValue=""
            )
        )      
        #-----------------B03----------------------
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NOISE_DAY,
                self.tr('Ruido día'),
                defaultValue="",
                optional = True
            )
        )
     

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NOISE_NIGHT,
                self.tr('Ruido noche'),
                optional = True,
                defaultValue=""
            )
        )          


        #-----------------B04----------------------    

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ROADS,
                self.tr('Red vial'),
                [QgsProcessing.TypeVectorLine],
                optional = True,
                defaultValue = ""
            )
        )  

        self.addParameter(
          QgsProcessingParameterEnum(
          self.DISTANCE_OPTIONS,
          self.tr('Tipo de distancia'),
          options=['ISOCRONA','RADIAL'], 
          allowMultiple=False, 
          defaultValue=1)
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EQUIPMENT_GREEN,
                self.tr('Espacio verde público'),
                [QgsProcessing.TypeVectorPoint],
                optional = True,
                defaultValue=""
            )
        )

        #-----------------B05----------------------

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.GREEN,
                self.tr('Areas verdes'),
                [QgsProcessing.TypeVectorAnyGeometry],
                optional = True,
                defaultValue=""
            )
        )

        #-----------------B06----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.AGRICULTRURAL,
                self.tr('Areas verdes'),
                [QgsProcessing.TypeVectorAnyGeometry],
                optional = True,
                defaultValue=""
            )
        )

        #-----------------B07----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SOIL,
                self.tr('Suelo permeable'),
                [QgsProcessing.TypeVectorAnyGeometry],
                optional = True,
                defaultValue=""
            )
        )        
        #-----------------OTHERS----------------------

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B01,
                self.tr('B01 Calidad del aire'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B01)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B02,
                self.tr('B02 Luminación nocturna del viario público'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B02)
            )
        )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B03,
                self.tr('B03 Confort acústico'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B03)
            )
        )  


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B04,
                self.tr('B04 Proximidad al espacio verde público más cercano'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B04)
            )
        )           

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B05,
                self.tr('B05 Superficie verde por habitante'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B05)
            )
        )      

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B06,
                self.tr('B06 Superficie agrícola y huertos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B06)
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B07,
                self.tr('B07 Permeabilidad del suelo'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B07)
            )
        )
                                  

             

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 8
        outputs = {}
        results = {}
        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        isValid = lambda x: x is not None

        isBlocks = isValid(params['BLOCKS'])
        isFieldPopulation = isValid(params['FIELD_POPULATION'])
        isFieldHousing = isValid(params['FIELD_HOUSING'])
        isStudyArea = isValid(params['STUDY_AREA_GRID']) 

        isNo2 = isValid(params['NO2'])
        isO3 = isValid(params['O3'])
        isPS = isValid(params['PS'])
        isSO2 = isValid(params['SO2'])    


        if isBlocks and isFieldPopulation and isNo2 and isO3 and isPS and isSO2:
            # B01 Calidad del aire
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'FIELD_POPULATION': params['FIELD_POPULATION'],
                'NO2': params['NO2'],
                'O3': params['O3'],
                'PS': params['PS'],
                'SO2': params['SO2'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B01']
            }
            outputs['B01CalidadDelAire'] = processing.run('SISURBANO:B01 Calidad del aire', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B01'] = outputs['B01CalidadDelAire']['OUTPUT']    



        isLuminary = isValid(params['LUMINARY'])
        isRoads = isValid(params['ROADS'])    


        if isBlocks and isFieldPopulation and isLuminary and isRoads:
            # B02 Luminación nocturna del viario público
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'FIELD_POPULATION': params['FIELD_POPULATION'],
                'LUMINARY': params['LUMINARY'],
                'ROADS': params['ROADS'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B02']
            }
            outputs['B02LuminacinNocturnaDelViarioPblico'] = processing.run('SISURBANO:B02 Luminación nocturna del viario público', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B02'] = outputs['B02LuminacinNocturnaDelViarioPblico']['OUTPUT']        




        isNoiseDay = isValid(params['NOISE_DAY'])
        isNoiseNight = isValid(params['NOISE_NIGHT'])    


        if isBlocks and isFieldPopulation and isNoiseDay and isNoiseNight:
            # B03 Confort acústico
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'FIELD_POPULATION': params['FIELD_POPULATION'],
                'NOISE_DAY': params['NOISE_DAY'],
                'NOISE_NIGHT': params['NOISE_NIGHT'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B03']
            }
            outputs['B03ConfortAcstico'] = processing.run('SISURBANO:B03 Confort acústico', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B03'] = outputs['B03ConfortAcstico']['OUTPUT']  



        isEquipementGreen = isValid(params['EQUIPMENT_GREEN'])
        isDistanceOptions = isValid(params['DISTANCE_OPTIONS'])    


        if isBlocks and isEquipementGreen and isRoads and isDistanceOptions and isFieldPopulation:               
            # B04 Proximidad al espacio verde público más cercano
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'EQUIPMENT_GREEN': params['EQUIPMENT_GREEN'],
                'ROADS': params['ROADS'],
                'DISTANCE_OPTIONS': params['DISTANCE_OPTIONS'],               
                'FIELD_POPULATION': params['FIELD_POPULATION'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B04']
            }
            outputs['B04ProximidadAlEspacioVerdePblicoMsCercano'] = processing.run('SISURBANO:B04 Proximidad al espacio verde público más cercano', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B04'] = outputs['B04ProximidadAlEspacioVerdePblicoMsCercano']['OUTPUT']


        isGreen = isValid(params['GREEN'])    

        if isBlocks and isFieldPopulation and isGreen:
            # B05 Superficie verde por habitante
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'FIELD_POPULATION': params['FIELD_POPULATION'],
                'GREEN': params['GREEN'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B05']
            }
            outputs['B05SuperficieVerdePorHabitante'] = processing.run('SISURBANO:B05 Superficie verde por habitante', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B05'] = outputs['B05SuperficieVerdePorHabitante']['OUTPUT']                   



        isAgricultural = isValid(params['AGRICULTRURAL'])           


        if isAgricultural and isBlocks:
            # B06 Superficie agrícola y huertos
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'AGRICULTRURAL': params['AGRICULTRURAL'],
                'BLOCKS': params['BLOCKS'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B06']
            }
            outputs['B06SuperficieDeReaAgrcolahuertos'] = processing.run('SISURBANO:B06 Superficie agrícola y huertos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B06'] = outputs['B06SuperficieDeReaAgrcolahuertos']['OUTPUT']     


        isSoil = isValid(params['SOIL'])     

        if isBlocks and isSoil:
            # B07 Permeabilidad del suelo
            steps += 1
            feedback.setCurrentStep(steps)
            if feedback.isCanceled():
                return {}
            alg_params = {
                'BLOCKS': params['BLOCKS'],
                'SOIL': params['SOIL'],
                'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
                'OUTPUT': params['OUTPUT_B07']
            }
            outputs['B07PermeabilidadDelSuelo'] = processing.run('SISURBANO:B07 Permeabilidad del suelo', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['OUTPUT_B07'] = outputs['B07PermeabilidadDelSuelo']['OUTPUT']    

        return results


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'make-hexa_logo.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B00 Todos los indicadores B'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B Ambiente biofísico'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IB00WrapB()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Calcula todos los indicadores de Ambiente biofísico</span><br/>"