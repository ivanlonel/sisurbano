# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-21
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-09-16'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

#pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IB01AirQuality(QgsProcessingAlgorithm):
    """
    Mide la cantidad de población expuesta a niveles de emisión no
    superiores a los determiandos como nocivos para la salud. 
    Formula: (Población no expuesta a aire nocivo / Total de la población)*100
    """
    NO2 = 'NO2'
    PS = 'PS'
    SO2 = 'SO2'
    O3 = 'O3'
    BLOCKS = 'BLOCKS'
    # FIELD_POPULATION = 'FIELD_POPULATION'
    FIELD_POPULATION = 'FIELD_POPULATION'
    CELL_SIZE = 'CELL_SIZE'    
    OUTPUT = 'OUTPUT'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'    




    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB01'][1]))           
          
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # self.addParameter(
        #     QgsProcessingParameterField(
        #         self.FIELD_POPULATION,
        #         self.tr('Población'),
        #         'poblacion', 'BLOCKS'
        #     )
        # )      

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS'
            )
        )         

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )

        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )           

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.O3,
                self.tr('O3 OZONO'),
                # defaultValue=None,
            )
        )          


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NO2,
                self.tr('NO2 DIOXIDO DE NITROGENO'),
                defaultValue=None
            )
        )
     

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.SO2,
                self.tr('SO2 DIOXIDO DE AZUFRE'),
                defaultValue=None
            )
        )   


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.PS,
                self.tr('Ps PARTICULAS FINAS'),
                defaultValue=None
            )
        )   


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)                
            )
        )

    def processAlgorithm(self, params, context, feedback):
        totalStpes = 14
        # fieldPopulation = params['FIELD_POPULATION']
        fieldPopulation = params['FIELD_POPULATION']
        maxO3 = str(100)
        maxNO2 = str(40)
        maxSO2 = str(60)
        maxPS = str(1)

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)


        """
      -----------------------------------------------------------------
      Calcular numero de viviendas por hexagano
      -----------------------------------------------------------------
      """
        steps = 0 + 1
        feedback.setCurrentStep(steps)
        if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE
        grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['BLOCKS'],
                                           params['STUDY_AREA_GRID'],
                                           context, feedback)
        gridNeto = grid  


        steps += 1
        feedback.setCurrentStep(steps)
        blocks = calculateArea(params['BLOCKS'], 'area_bloc', context,
                               feedback)


        steps += 1
        feedback.setCurrentStep(steps)
        segments = intersection(blocks['OUTPUT'], gridNeto['OUTPUT'],
                                ['area_bloc',fieldPopulation],
                                'id_grid',
                                context, feedback)


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsArea = calculateArea(segments['OUTPUT'],
                                     'area_seg',
                                     context, feedback)


        steps += 1
        feedback.setCurrentStep(steps)
        formulaPopulationSegments = f'(area_seg/area_bloc) * {fieldPopulation}'
        populationForSegments = calculateField(segmentsArea['OUTPUT'], 'pop_seg',
                                            formulaPopulationSegments,
                                            context,
                                            feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        blocks = calculateField(populationForSegments['OUTPUT'], 'id_blocks', '$id', context,
                                      feedback, type=1)          

        steps += 1
        feedback.setCurrentStep(steps)
        stByZona(params['O3'], blocks['OUTPUT'],
                                   1, [2], 'o3_', 
                                   context, feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        stByZona(params['NO2'], blocks['OUTPUT'],
                                   1, [2], 'no2_', 
                                   context, feedback)    

        steps += 1
        feedback.setCurrentStep(steps)
        stByZona(params['SO2'], blocks['OUTPUT'],
                                   1, [2], 'so2_', 
                                   context, feedback)                                    

        steps += 1
        feedback.setCurrentStep(steps)
        stByZona(params['PS'], blocks['OUTPUT'],
                                   1, [2], 'ps_', 
                                   context, feedback)  


        steps += 1
        feedback.setCurrentStep(steps)
        expression = 'id_blocks != -100'


        comodin = filterByExpression(blocks['OUTPUT'], expression, context, feedback)



        condition = f"CASE WHEN (o3_mean > {maxO3} OR no2_mean > {maxNO2} OR so2_mean > {maxSO2} OR ps_mean > {maxPS}) THEN 1 ELSE 0 END"         


          # print(condition)

        steps += 1
        feedback.setCurrentStep(steps)
        blocksPull = calculateField(comodin['OUTPUT'], 'is_pull',
                                          condition,
                                          context,
                                          feedback, type=1)     

          # Haciendo el buffer inverso aseguramos que los segmentos
          # quden dentro de la malla
        steps += 1
        feedback.setCurrentStep(steps)
        pullForSegmentsFixed = makeSureInside(blocksPull['OUTPUT'],
                                                    context,
                                                    feedback)
          # Con esto se saca el total de viviendas
        steps += 1
        feedback.setCurrentStep(steps)
        gridNetoAndSegmentsPull = joinByLocation(gridNeto['OUTPUT'],
                                             pullForSegmentsFixed['OUTPUT'],
                                             ['pop_seg'],
                                             [CONTIENE], [SUM], UNDISCARD_NONMATCHING,                 
                                             context,
                                             feedback)

          #descartar NULL para obtener el total de viviendas que cumple
        steps += 1
        feedback.setCurrentStep(steps)
        pullActiveForSegmentsFixed = filter(pullForSegmentsFixed['OUTPUT'],
                                                   'is_pull', IGUAL,
                                                   '0', context, feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        gridNetoAndSegmentsNotNull = joinByLocation(gridNetoAndSegmentsPull['OUTPUT'],
                                                    pullActiveForSegmentsFixed['OUTPUT'],
                                                    ['pop_seg', 'is_pull'],
                                                    [CONTIENE], [SUM], UNDISCARD_NONMATCHING,               
                                                    context,
                                                    feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        formulaPull = 'coalesce((coalesce(pop_seg_sum_2,0) /  coalesce(pop_seg_sum,""))*100, "")'
        return calculateField(
            gridNetoAndSegmentsNotNull['OUTPUT'],
            NAMES_INDEX['IB01'][0],
            formulaPull,
            context,
            feedback,
            params['OUTPUT'],
        )


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'air.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B01 Calidad del aire'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B Ambiente biofísico'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IB01AirQuality()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Mide la cantidad de población no expuesta a niveles de emisión superiores a los determinados como nocivos para la salud por la Norma Ecuatoriana de Calidad del Aire Ambiente.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>Se evalua por separado cada uno de los contaminantes: NO2, CO, SO2, O3, MP2.5 y MP10. Se utilizan los resultados de los cálculos realizados por el IERSE y EMOV en el años 2015. Si de entrada no se cumple con los niveles para uno de los contaminates, se considera que es una poblacion expuesta y no es necesario seguir con el análisis del siguiente contaminante.</span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>(Población no expuesta a aire nocivo / Total de la población)*100</span><br/>"           

