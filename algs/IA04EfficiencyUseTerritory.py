# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-09-16'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

#pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IA04EfficiencyUseTerritory(QgsProcessingAlgorithm):
    """
    Mide la eficiencia del consumo del territorio y puede informar sobre la
    dispersión de una ciudad. Relación entre la tasa de crecimiento urbano
    y la tasa de crecimiento de la población. El indicador se mide para
    cada censo poblacional; el crecimiento urbano se expresa como el área
    urbanizada en planta baja de un territorio.

    El indicador se medirá para cada censo poblacional y, entendiendo el crecimiento urbano 
    como el área edificada en planta baja en un territorio (no area total construida en altura).
    En este caso, según información censal, el año inicial es 2000 y año final es 2010. 
    Para determinar el área construida en planta se realiza una clasificación en base
    a imágenes satelitales del año 2000 y 2010.    

    Formula:
    (((Urbt+n – Urbt) / Urbt)^1/y) / (((Popt+n – Popt) / Popt)^1/y)    
    """

    YEARS = 'YEARS'
    BLOCKS_LAST = 'BLOCKS_LAST'
    BLOCKS_BEGIN = 'BLOCKS_BEGIN'
    BUILT_BEGIN = 'BUILT_BEGIN'
    BUILT_LAST = 'BUILT_LAST'
    FIELD_POPULATION_LAST = 'FIELD_POPULATION_LAST'
    FIELD_POPULATION_BEGIN = 'FIELD_POPULATION_BEGIN'
    CELL_SIZE = 'CELL_SIZE'
    OUTPUT = 'OUTPUT'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'


    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA04'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS_LAST,
                self.tr('Manzanas en el último año'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION_LAST,
                self.tr('Población en el último año'),
                'poblacion', 'BLOCKS_LAST'
            )
        )    

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS_BEGIN,
                self.tr('Manzanas en el año inicial'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION_BEGIN,
                self.tr('Población en el último año'),
                'poblacion', 'BLOCKS_BEGIN'
            )
        )              

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BUILT_LAST,
                self.tr('Área edificada en el último año'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BUILT_BEGIN,
                self.tr('Área edificada en el año inicial'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.YEARS,
                self.tr('Años entre el inicial y el final'),
                QgsProcessingParameterNumber.Integer,
                10, False, 1, 99999999
            )
        )                  


        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)
            )
        )

    def processAlgorithm(self, params, context, feedback):
        totalStpes = 24
        fieldPopulationLast = params['FIELD_POPULATION_LAST']
        fieldPopulationBegin = params['FIELD_POPULATION_BEGIN']
        years = str(params['YEARS'])

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)


        blocksBegin = params['BLOCKS_BEGIN']

        steps = 0 + 1
        feedback.setCurrentStep(steps)
        if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE
        grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['BLOCKS_BEGIN'],
                                           params['STUDY_AREA_GRID'],
                                           context, feedback)
        gridNeto = grid

        steps += 1
        feedback.setCurrentStep(steps)
        formula = f'{fieldPopulationBegin}* 1'
        blocksBegin = calculateField(blocksBegin, 'pop_begin',
                                        formula,
                                        context,
                                        feedback)   

        blocksBegin =  blocksBegin['OUTPUT']    


        steps += 1
        feedback.setCurrentStep(steps)
        blocksBegin = calculateArea(blocksBegin, 'area_bloc', context,
                             feedback)



        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBegin = intersection(blocksBegin['OUTPUT'], gridNeto['OUTPUT'],
                                ['pop_begin','area_bloc'],
                                'id_grid',
                                context, feedback) 


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBeginArea = calculateArea(segmentsBegin['OUTPUT'],
                                   'area_seg',
                                   context, feedback)


        steps += 1
        feedback.setCurrentStep(steps)
        formulaLastPopulationSegments = '(area_seg/area_bloc) * pop_begin'
        beginHousingForSegments = calculateField(segmentsBeginArea['OUTPUT'], 'seg_pop_begin',
                                          formulaLastPopulationSegments,
                                          context,
                                          feedback)        


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBeginFixed = makeSureInside(beginHousingForSegments['OUTPUT'],
                                                    context,
                                                    feedback)
        blocks = params['BLOCKS_LAST']

        steps += 1
        feedback.setCurrentStep(steps)
        formula = f'{fieldPopulationLast}* 1'
        blocks = calculateField(blocks, 'pop_last',
                                        formula,
                                        context,
                                        feedback)
        blocks =  blocks['OUTPUT'] 


        steps += 1
        feedback.setCurrentStep(steps)
        blocks = calculateArea(blocks, 'area_bloc', context,
                             feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsLast = intersection(blocks['OUTPUT'] , gridNeto['OUTPUT'],
                                ['area_bloc','pop_last'],
                                'id_grid',
                                context, feedback)     

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsLastArea = calculateArea(segmentsLast['OUTPUT'],
                                   'area_seg',
                                   context, feedback)    

        steps += 1
        feedback.setCurrentStep(steps)
        formulaLastPopulationSegments = '(area_seg/area_bloc) * pop_last'
        lastHousingForSegments = calculateField(segmentsLastArea['OUTPUT'], 'seg_pop_last',
                                          formulaLastPopulationSegments,
                                          context,
                                          feedback)                                                                  


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsLastFixed = makeSureInside(lastHousingForSegments['OUTPUT'],
                                                    context,
                                                    feedback)


        steps += 1
        feedback.setCurrentStep(steps)
        gridNetoAndSegmentsLast = joinByLocation(gridNeto['OUTPUT'],
                                             segmentsLastFixed['OUTPUT'],
                                              ['seg_pop_last'],                                   
                                              [CONTIENE], [SUM],
                                              UNDISCARD_NONMATCHING,
                                              context,
                                              feedback)   


        builtLast =  params['BUILT_LAST']
        builtBegin =  params['BUILT_BEGIN']

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltLast = intersection(builtLast, gridNeto['OUTPUT'],
                                        [],
                                        [],
                                        context, feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltBegin = intersection(builtBegin, gridNeto['OUTPUT'],
                                        [],
                                        [],
                                        context, feedback)        

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltLastArea = calculateArea(segmentsBuiltLast['OUTPUT'],
                                     'area_last',
                                     context, feedback)   


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltLastBeginArea = calculateArea(segmentsBuiltBegin['OUTPUT'],
                                     'area_begin',
                                     context, feedback)      


        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltLastAreaFixed = makeSureInside(segmentsBuiltLastArea['OUTPUT'],
                                                    context,
                                                    feedback)

        steps += 1
        feedback.setCurrentStep(steps)
        segmentsBuiltLastBeginAreaFixed = makeSureInside(segmentsBuiltLastBeginArea['OUTPUT'],
                                                    context,
                                                    feedback)        



        steps += 1
        feedback.setCurrentStep(steps)
        populations = joinByLocation(gridNetoAndSegmentsLast['OUTPUT'],
                                     segmentsBeginFixed['OUTPUT'],
                                      ['seg_pop_begin'],                                   
                                      [CONTIENE], [SUM],
                                      UNDISCARD_NONMATCHING,
                                      context,
                                      feedback)  


        steps += 1
        feedback.setCurrentStep(steps)
        populationsArea = joinByLocation(populations['OUTPUT'],
                                     segmentsBuiltLastAreaFixed['OUTPUT'],
                                      ['area_last'],                                   
                                      [CONTIENE], [SUM],
                                      UNDISCARD_NONMATCHING,
                                      context,
                                      feedback)  


        steps += 1
        feedback.setCurrentStep(steps)
        populationsArea = joinByLocation(populationsArea['OUTPUT'],
                                     segmentsBuiltLastBeginAreaFixed['OUTPUT'],
                                      ['area_begin'],                                   
                                      [CONTIENE], [SUM],
                                      UNDISCARD_NONMATCHING,
                                      context,
                                      feedback)                                                



        numerador = (
            f'(area_last_sum - area_begin_sum) / (area_begin_sum ^ (1 /{years}))'
        )
        denominador = f'(seg_pop_last_sum - seg_pop_begin_sum) / (seg_pop_begin_sum ^ (1 /{years}))'
        formula = (
            f'coalesce(coalesce({numerador}, 0) / coalesce({denominador}, ""),"")'
        )

        print(formula)

        steps += 1
        feedback.setCurrentStep(steps)
        return calculateField(
            populationsArea['OUTPUT'],
            NAMES_INDEX['IA04'][0],
            formula,
            context,
            feedback,
            params['OUTPUT'],
        )

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        #return {self.OUTPUT: dest_id}

    def icon(self):
        return QIcon(os.path.join(pluginPath, 'effi.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A04 Eficiencia en el uso del territorio'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A Ambiente construido'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IA04EfficiencyUseTerritory()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Mide la eficiencia del consumo del territorio y puede informar sobre la dispersión de una ciudad. Relación entre la tasa de crecimiento urbano y la tasa de crecimiento de la población. El indicador se mide para cada censo poblacional; el crecimiento urbano se expresa como el área urbanizada en planta baja de un territorio.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>El indicador se medirá para cada censo poblacional y, entendiendo el crecimiento urbano como el área edificada en planta baja en un territorio (no area total construida en altura). En este caso, según información censal, el año inicial es 2000 y año final es 2010. Para determinar el área construida en planta se realiza una clasificación en base a imágenes satelitales del año 2000 y 2010.</span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>(((Urbt+n – Urbt) / Urbt)^1/y) / (((Popt+n – Popt) / Popt)^1/y)</span><br/><br/>"\
                "((Área edificada en el último año - Área edificada en el año inicial) / Área edificada en el año inicial ^ 1/ Número de años entre el inicial y final) / ((Población en el último año - Población en el año inicial) / Población en el año inicial ^ 1/ Número de años entre el inicial y final)"